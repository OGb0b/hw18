from ftplib import all_errors

from aiogram import Router, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from data import notes
from keyboard.inline_kb import start_keyboard_inline, kb
from states.state_bot import NoteStates
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

router = Router()

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ (—Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
         reply_markup=start_keyboard_inline)
    await state.set_state(NoteStates.Start)


@router.callback_query(F.data == 'add', NoteStates.Start)
async def add_note_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(NoteStates.AddNote)

@router.message(NoteStates.AddNote)
async def save_note(message: Message, state: FSMContext):
    note_text = message.text
    notes.append(note_text)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –ë–î)
    # await state.update_data(last_note=note_text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ FSM, –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–¥
    await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n{note_text}")
    await state.set_state(NoteStates.Start)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard_inline)


@router.callback_query(F.data == 'show', NoteStates.Start)
async def show_notes(cb: CallbackQuery, state: FSMContext):
    await cb.answer()

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –∏–∑ –ë–î/—Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if not notes:
        await cb.message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    else:
        await cb.message.answer(
            "üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n" + "\n".join(f"‚Ä¢ {note}" for note in notes)
        )

    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard_inline)


@router.callback_query(F.data == 'delete', NoteStates.Start)
async def select_notes_to_delete(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    if not notes:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    buttons = []
    for index, note in enumerate(notes):
        note_preview = ' '.join(note.split()[:3])
        if len(note.split()) > 3:
            note_preview += " ..."

        buttons.append(
            InlineKeyboardButton(
                text=f"{index + 1}. {note_preview}",
                callback_data=f"delete_note_{index}"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "delete_note_0"
            )
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])
    await state.set_state(NoteStates.DeleteNote)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )


@router.callback_query(NoteStates.DeleteNote)
async def confirm_note_deletion(callback: CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç "delete_note_0")
        note_index = int(callback.data.split('_')[-1])

        if 0 <= note_index < len(notes):
            deleted_note = notes.pop(note_index)  # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É
            await callback.message.answer(f"üóë –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞:\n{deleted_note}")
        else:
            await callback.message.answer("‚ö† –û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except (ValueError, IndexError):
        await callback.message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.set_state(NoteStates.Start)
    await callback.answer()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_keyboard_inline)

#
# @router.callback_query(lambda cb: cb.data in ['add', 'show', 'delete'])
# async def callback(cb: CallbackQuery, state: FSMContext):
#     await cb.answer()
#     await cb.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {cb.data}')
#

    # await state.update_data(main_course=cb.data)
    # print(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {choice}')
    # await cb.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫: ', reply_markup=kb)
    # print(await state.get_data())
    # await state.set_state(MenuState.drink_state)

# @router.callback_query(lambda cb: cb.data in ['juice', 'tea'], StateFilter('MenuState:drink_state'))
# async def get_drink(cb: CallbackQuery, state: FSMContext):
#     await cb.answer()
#     await cb.message.answer('–°–ø–∞—Å–∏–±–æ')
#     print(await state.get_data())
#     print(await state.get_state())
#     await state.clear()
#     await state.set_data({})
#     print(await state.get_data())
#     print(await state.get_state())

#
# @router.message(Command('test'))
# async def test_reply(m: Message):
#     await m.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=reply_kb.keyboard_reply)
#
# @router.message(Command('buy'))
# async def buy_func(m: Message, state: FSMContext):
#     await m.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ: ', reply_markup=keyboard_inline)
#     # print(await state.get_state())
#     await state.set_state(MenuState.main_course_state)
#     # print(await state.get_state())
#     print(await state.get_data())
#