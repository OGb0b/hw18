from aiogram import Router, F
from aiogram.dispatcher.middlewares import data
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from keyboard.inline_kb import start_keyboard_inline
from states.state_bot import NoteStates
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from data.note_data import  save_data, load_data
import datetime


router = Router()

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
         reply_markup=start_keyboard_inline)
    await state.set_state(NoteStates.Start)


@router.callback_query(F.data == 'add', NoteStates.Start)
async def add_note_start(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
    await state.set_state(NoteStates.AddNote)

@router.message(NoteStates.AddNote)
async def save_note(message: Message, state: FSMContext):
    user_id = message.from_user.id
    note_text = message.text
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    note = load_data()
    if str(user_id) in note:
        note[str(user_id)].append({current_time: note_text})
    else:
        note[user_id] = [{current_time: note_text}]
    save_data(note)
    await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n{note_text}")
    await state.set_state(NoteStates.Start)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard_inline)


@router.callback_query(F.data == 'show', NoteStates.Start)
async def show_notes(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    user_id = cb.from_user.id
    note = load_data()
    user_notes = note.get(str(user_id), [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    notes_text = [
        f"‚Ä¢ {list(note_data.values())[0]}"  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        for note_data in user_notes
    ]
    await cb.message.answer(
        "üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n" + "\n".join(notes_text) if notes_text else "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."
    )
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard_inline)


@router.callback_query(F.data == 'delete', NoteStates.Start)
async def select_notes_to_delete(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    user_id = str(cb.from_user.id)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
    note = load_data()
    user_notes = note.get(user_id, [])  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫

    if not user_notes:
        await cb.message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏
    buttons = []
    for index, note_data in enumerate(user_notes):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è {–≤—Ä–µ–º—è: —Ç–µ–∫—Å—Ç})
        note_text = list(note_data.values())[0]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é (–ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞ + "...")
        words = note_text.split()
        preview = ' '.join(words[:3]) + ("..." if len(words) > 3 else "")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
        buttons.append(
            InlineKeyboardButton(
                text=f"{index + 1}. {preview}",
                callback_data=f"delete_note_{index}"  # –ò–Ω–¥–µ–∫—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            )
        )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await state.set_state(NoteStates.DeleteNote)
    await cb.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )

@router.callback_query(NoteStates.DeleteNote)
async def confirm_note_deletion(cb: CallbackQuery, state: FSMContext):
    await cb.answer()
    note = load_data()
    user_id = cb.from_user.id
    user_notes = note[str(user_id)]
    try:
        note_index = int(cb.data.split('_')[-1])
        user_notes = note.get(str(user_id), [])
        if 0 <= note_index < len(user_notes):
            deleted_note = user_notes.pop(note_index)
            save_data(note)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await cb.message.answer(f"üóë –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞:\n{list(deleted_note.values())[0]}")
        else:
            await cb.message.answer("‚ö† –û—à–∏–±–∫–∞: –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except (ValueError, IndexError):
        await cb.message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

    await state.set_state(NoteStates.Start)
    await cb.answer()
    await cb.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=start_keyboard_inline)

#
# @router.callback_query(lambda cb: cb.data in ['add', 'show', 'delete'])
# async def callback(cb: CallbackQuery, state: FSMContext):
#     await cb.answer()
#     await cb.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {cb.data}')
#

    # await state.update_data(main_course=cb.data)
    # print(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {choice}')
    # await cb.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫: ', reply_markup=kb)
    # print(await state.get_data())
    # await state.set_state(MenuState.drink_state)

# @router.callback_query(lambda cb: cb.data in ['juice', 'tea'], StateFilter('MenuState:drink_state'))
# async def get_drink(cb: CallbackQuery, state: FSMContext):
#     await cb.answer()
#     await cb.message.answer('–°–ø–∞—Å–∏–±–æ')
#     print(await state.get_data())
#     print(await state.get_state())
#     await state.clear()
#     await state.set_data({})
#     print(await state.get_data())
#     print(await state.get_state())

#
# @router.message(Command('test'))
# async def test_reply(m: Message):
#     await m.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É', reply_markup=reply_kb.keyboard_reply)
#
# @router.message(Command('buy'))
# async def buy_func(m: Message, state: FSMContext):
#     await m.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –±–ª—é–¥–æ: ', reply_markup=keyboard_inline)
#     # print(await state.get_state())
#     await state.set_state(MenuState.main_course_state)
#     # print(await state.get_state())
#     print(await state.get_data())
#